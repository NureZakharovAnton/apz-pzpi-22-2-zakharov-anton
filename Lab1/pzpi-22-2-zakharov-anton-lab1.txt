Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №1
з дисципліни «Архітектура програмного забезпечення»
на тему: «Доопрацювання Vision & Scope»



Виконав 
ст. гр. ПЗПІ-22-2
Захаров Антон Володимирович

Перевірив
доц. каф. ПІ 
Сокорчук Ігор Петрович


Харків 2025
1 МЕТА РОБОТИ

Метою лабораторної роботи є вдосконалення документа Vision & Scope для програмної системи замовлення послуг із контролем їх виконання шляхом деталізації розділу 3, що включає формулювання функціональних меж первинного релізу системи (3.1), перспектив розвитку (3.2) та обмежень реалізації (3.3).

2 ХІД РОБОТИ

Під час виконання лабораторної роботи було оновлено розділ 3 документа Vision & Scope для системи замовлення послуг із контролем їх виконання. У межах доопрацювання визначено функціональні можливості, що будуть реалізовані в першому релізі системи, заплановано розширення за допомогою інноваційних рішень, зокрема інтеграцію платіжних систем та мобільних застосунків, а також наведено перелік функціональних обмежень на початковому етапі.
У початковому випуску система передбачає можливості для створення замовлень, реєстрації користувачів, пошуку виконавців та базового моніторингу виконання завдань.
У наступних релізах передбачається реалізація розширеної функціональності: мобільного додатку, інтеграції з платіжними системами, індикатора статусу замовлення через фізичний пристрій, а також аналітичного модуля для користувачів.
Функціональні обмеження першої версії включають відсутність розширених аналітичних звітів, підтримки декількох валют, локалізації інтерфейсу та повної автоматизації сповіщень. Такий підхід дозволяє зосередитися на ключових функціях та забезпечити стабільну базу для подальшого розвитку системи.

ВИСНОВКИ

У результаті виконання лабораторної роботи було доопрацьовано розділ 3 документа Vision & Scope для системи замовлення послуг із контролем їх виконання. Це дало змогу чітко визначити ключовий функціонал першого релізу, спланувати майбутній розвиток системи та описати функціональні обмеження поточної реалізації. Такий підхід сприяє формуванню цілісного бачення продукту та забезпечує стабільну основу для реалізації наступних версій.
 
ДОДАТОК А
Посилання на відеозапис доповіді

     Відеозапис доповіді на YouTube: https://youtu.be/aGLnjRwgUzk
Нижче наведено хронологічний опис доповіді.
0:30 Мета
0:55 Хід Роботи
1:20 Висновки
1:40 Передумови (розділ 1.1)
2:15 Бізнес Можливості (розділ 1.2)
2:55 Окреслення Концепції (розділ 2.1)
3:30 Головна Функціональність (розділ 2.2)
4:40 Рамки Первинного Випуску (розділ 3.1)
5:12 Рамки Наступних Випусків (розділ 3.2)
5:30 Робоче Середовище (розділ 4.3)

ДОДАТОК Б

VISION AND SCOPE DOCUMENT (КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ)


Vision and Scope Document
for
Система замовлення послуг із контролем виконання 
Version 2.0 approved
Prepared by Захаров Антон Володимирович
Харківський національний університет радіоелектроніки
06.05.2025

 
Table of Contents
Table of Contents
Revision History
3. Scope and Limitations (Рамки та обмеження проєкту)	6
3.1 Scope of Initial Release (Рамки первинного випуску)	6
3.2 Scope of Subsequent Releases (Рамки наступних випусків)	7
3.3 Limitations and Exclusions (Обмеження та виключення)	7



Revision Histoty

Name	Date	Reason For Change	Version
Доопрацювання	06.05.2025	Доопрацювання Vision & Scope	2.0
			
1. BUSINESS REQUIREMENTS (БІЗНЕС ВИМОГИ)
1.1 Background (Передумови)
Замовлення послуг часто супроводжується низкою проблем, таких як недостатня прозорість виконання, труднощі в комунікації між сторонами, відсутність єдиного інструменту для моніторингу процесу. Замовники стикаються з низьким рівнем довіри до виконавців, а виконавці — із затримками оплати через суперечки щодо результатів роботи.
Система замовлення послуг із контролем виконання покликана вирішити ці проблеми за рахунок впровадження централізованої платформи для замовників і виконавців.
1.2 Business Opportunity (Бізнес-можливості)
Ринок онлайн-платформ для замовлення послуг активно зростає, проте більшість наявних рішень фокусується лише на функції пошуку виконавців. Нова система запропонує інноваційний підхід, інтегруючи інструменти моніторингу, прозорої комунікації та автоматизації контролю виконання замовлень. Планується використання окремих приладів для провадження системи слідкування за статусом замовлення.

2. VISION OF THE SOLUTION (КОНЦЕПЦІЯ РІШЕННЯ)
2.1 Vision Statement (Окреслення концепції)
Метою розробки є створення програмної системи, яка забезпечить:
1.	Простий і зручний інтерфейс для створення замовлень;
2.	Моніторинг виконання послуг у реальному часі;
3.	Звіти та автоматизацію перевірки виконання замовлень;
4.	Інтеграцію з платіжними системами для прозорої оплати.
2.2 Major Features (Головна функціональність)
1.	Створення замовлень: користувач може вказати опис, дедлайн, бюджет та інші параметри.
2.	Пошук виконавців: алгоритм підбору виконавців на основі рейтингу та навичок.
3.	Моніторинг виконання: замовник може слідкувати за прогресом замовлення у реальному часі.
4.	Автоматизація звітності: генерація фінальних звітів для підтвердження виконання послуг.
5.	Інтеграція з платіжними системами: автоматичне списання коштів після затвердження виконання.
6.	Сповіщення: оповіщення про зміни статусу замовлення.
7.	Індикація на реальному пристрої: відображення статусу замовлення за допомогою світлодіодів на окремому пристрої.

3. Scope and Limitations (Рамки та обмеження проєкту)

3.1 Scope of Initial Release (Рамки первинного випуску)

	Початковий випуск системи передбачає реалізацію базових функцій:
	- Реєстрація та автентифікація користувачів;
	- Створення замовлень з параметрами (опис, дедлайн, бюджет);
	- Пошук виконавців за критеріями (рейтинги, навички);
	- Моніторинг процесу виконання послуг у веб-додатку;
	- Сповіщення про зміну статусу замовлення.

	Серверна частина буде реалізована за допомогою NestJS, із збереженням даних у MongoDB. Веб-інтерфейс базуватиметься на React з використанням Redux Toolkit, RTK Query, Material UI, Formik та Yup для роботи з формами.

 
3.2 Scope of Subsequent Releases (Рамки наступних випусків)

У майбутніх версіях планується:
- Інтеграція з платіжними системами для автоматизованої оплати;
- Мобільний додаток на основі React Native;
- Реалізація індикатора замовлень через фізичний пристрій зі світлодіодною індикацією;
- Розширена аналітика для замовників і виконавців;
- Підтримка багатомовного інтерфейсу;
- Використання ШІ для підбору виконавців та прогнозування затримок виконання.

3.3 Limitations and Exclusions (Обмеження та виключення)

Поточна версія системи свідомо не включає:
- Повну інтеграцію платіжної системи (реалізація запланована на наступний реліз);
- Функції глибокої аналітики та побудови звітів;
- Підтримку кількох мов та валют;
- Складну багаторівневу систему ролей;
- Підтримку голосових команд або чат-ботів;
- Інтерфейс для окремих категорій користувачів (наприклад, агентств чи групових виконавців).

Обмеження пояснюються необхідністю фокусування на критично важливому функціоналі та забезпеченні стабільності системи на стартовому етапі.


4. BUSINESS CONTEXT (БІЗНЕС-КОНТЕКСТ)
4.3 OPERATING ENVIRONMENT (РОБОЧЕ СЕРЕДОВИЩЕ)
Система замовлення послуг із контролем їх виконання буде працювати у середовищах, що забезпечують доступ із різних платформ (веб- та мобільні додатки). Це дозволить максимально ефективно охопити різні категорії користувачів — як тих, що працюють із настільними пристроями, так і тих, що віддають перевагу мобільному доступу.
Для реалізації системи буде використано сучасний стек технологій, що відповідає вимогам надійності, масштабованості та швидкодії:
Backend:
1.	Node.js — використовується як основна серверна мова завдяки високій продуктивності та підтримці великої кількості одночасних з'єднань.
2.	NestJS — дозволяє будувати масштабовані серверні додатки із чіткою архітектурою. Його модульність та інтеграція із сучасними бібліотеками ідеально підходять для створення складних проєктів.
3.	MongoDB — як база даних для гнучкого зберігання даних про користувачів, замовлення та послуги.
4.	Mongoose — ORM для ефективної взаємодії з MongoDB, що спрощує управління схемами даних та їхньою валідацією.
5.	Class-Transformer та Class-Validator — забезпечують автоматичну трансформацію та перевірку вхідних даних, що покращує якість API.
6.	JWT — забезпечує авторизацію користувачів через токени, підвищуючи безпеку та швидкість перевірки доступу.
Frontend (Web):
1.	React — обрано як бібліотеку для розробки інтерфейсу завдяки її ефективності, популярності та великій екосистемі.
2.	Redux/Redux Toolkit — забезпечує ефективне управління станом додатка, зокрема для обробки складних сценаріїв взаємодії з користувачем.
3.	RTK Query — дозволяє легко організувати та кешувати запити до серверного API, покращуючи продуктивність.
4.	Formik та Yup — спрощують обробку форм і валідацію даних.
5.	Material UI — забезпечує готові компоненти для швидкої стилізації та єдиного вигляду інтерфейсу.
Mobile (React Native):
1.	React Native — використовується для створення кросплатформного мобільного додатка, що дозволяє скоротити час розробки, підтримуючи і iOS, і Android.
2.	Redux та Redux Toolkit — аналогічно до веб-додатка, забезпечує управління станом мобільного додатка.
3.	Formik та Yup — використовується для створення та валідації форм на мобільних пристроях.
4.	React Native Material — стилізація мобільного інтерфейсу для створення сучасного та привабливого дизайну.
Інфраструктура:
1.	Хмарна платформа — розгортання бекенда, бази даних та інших сервісів планується на хмарних платформах (наприклад, AWS або Azure), що забезпечує високу доступність і масштабованість.
2.	Безперервна інтеграція та розгортання (CI/CD) — для швидкого впровадження оновлень і автоматизації тестування.
Така архітектура дозволить створити систему, яка буде ефективною, адаптивною та зручною для користувачів із різними пристроями та вимогами.
