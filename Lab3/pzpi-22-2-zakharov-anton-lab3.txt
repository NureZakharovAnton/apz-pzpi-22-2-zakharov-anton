МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»



ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №3
на тему:” РОЗРОБКА ВЕБКЛІЄНТА СИСТЕМИ"





Виконав:								Перевірив: 
ст. гр. ПЗПІ-22-2 							доц. каф. ПІ
Захаров А. В.							Сокорчук І. П.






Харків 2024

1 ЗАВДАННЯ

     Метою даного лабораторного заняття є розробка клієнтської / front-end частини програмної системи.

2 ОПИС ВИКОНАНОЇ РОБОТИ

     Було розроблено сучасний адаптивний фронтенд у вигляді адмін-панелі з використанням Material UI. Інтерфейс зручний у користуванні та відповідає стилю всього проєкту. Реалізовано перегляд усіх робіт, власних пропозицій і робіт, профілю, відгуків та платежів. Також додано можливість редагування профілю, створення та редагування робіт, а також вихід із облікового запису. Усі дані завантажуються з бекенду через захищені запити з токеном авторизації.

ВИСНОВКИ

У результаті було створено веб застосунок на реакті.

ДОДАТОК А
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/u8PsCRcRMlk

ДОДАТОК Б
Графічні матеріали
 
Рисунок Б.1 — ER-діаграма даних

 
Рисунок Б.2 — Структура бази даних

 
Рисунок Б.3 — UML-діаграма прецедентів

ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних.
     GitHub репозиторій: https://github.com/NureZakharovAnton/apz-pzpi-22-2-zakharov-anton/blob/main/Lab3/frontend/src/App.tsx

// ========== src/App.tsx ==========
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import AdminPanel from './components/AdminPanel';
import Login from './components/Login';
import Register from './components/Register';
import UserPanel from './components/UserPanel';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/admin" element={<AdminPanel />} />
        <Route path="/user" element={<UserPanel />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/" element={<Navigate to="/login" replace />} />
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    </Router>
  );
}

export default App;

// ========== src/main.tsx ==========
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

В.2 Адміністрування бізнес-логіки системи.

     GitHub репозиторій: https://github.com/NureZakharovAnton/apz-pzpi-22-2-zakharov-anton/blob/main/Lab3/frontend/src/components/AdminPanel.tsx

// ========== src/components/AdminPanel.tsx ==========
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import { Box, CssBaseline, Drawer, AppBar, Toolbar, Typography, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Button } from '@mui/material';
import PeopleIcon from '@mui/icons-material/People';
import RateReviewIcon from '@mui/icons-material/RateReview';
import DescriptionIcon from '@mui/icons-material/Description';
import PaymentIcon from '@mui/icons-material/Payment';
import WorkIcon from '@mui/icons-material/Work';
import LogoutIcon from '@mui/icons-material/Logout';
import UsersDataGrid from './UsersDataGrid';
import ReviewsDataGrid from './ReviewsDataGrid';
import ProposalsDataGrid from './ProposalsDataGrid';
import PaymentsDataGrid from './PaymentsDataGrid';
import JobsDataGrid from './JobsDataGrid';

const drawerWidth = 220;

const navItems = [
  { label: 'Users', icon: <PeopleIcon /> },
  { label: 'Reviews', icon: <RateReviewIcon /> },
  { label: 'Proposals', icon: <DescriptionIcon /> },
  { label: 'Payments', icon: <PaymentIcon /> },
  { label: 'Jobs', icon: <WorkIcon /> },
];

function PlaceholderGrid({ label }: { label: string }) {
  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5">{label} Data Grid (coming soon)</Typography>
    </Box>
  );
}

export default function AdminPanel() {
  const [selected, setSelected] = useState(0);
  const navigate = useNavigate();

  const handleSignOut = () => {
    localStorage.removeItem('accessToken');
    navigate('/login');
  };

  return (
    <Box sx={{ display: 'flex' }}>
      <CssBaseline />
      <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            Admin Panel
          </Typography>
          <Button color="inherit" startIcon={<LogoutIcon />} onClick={handleSignOut}>
            Sign Out
          </Button>
        </Toolbar>
      </AppBar>
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },
        }}
      >
        <Toolbar />
        <Box sx={{ overflow: 'auto' }}>
          <List>
            {navItems.map((item, idx) => (
              <ListItem key={item.label} disablePadding>
                <ListItemButton selected={selected === idx} onClick={() => setSelected(idx)}>
                  <ListItemIcon>{item.icon}</ListItemIcon>
                  <ListItemText primary={item.label} />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </Box>
      </Drawer>
      <Box component="main" sx={{ flexGrow: 1, bgcolor: 'background.default', p: 3, minHeight: '100vh' }}>
        <Toolbar />
        {selected === 0 && <UsersDataGrid />}
        {selected === 1 && <ReviewsDataGrid />}
        {selected === 2 && <ProposalsDataGrid />}
        {selected === 3 && <PaymentsDataGrid />}
        {selected === 4 && <JobsDataGrid />}
      </Box>
    </Box>
  );
}

// ========== src/components/UserPanel.tsx ==========
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import { Box, CssBaseline, Drawer, AppBar, Toolbar, Typography, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Button } from '@mui/material';
import WorkIcon from '@mui/icons-material/Work';
import AssignmentIcon from '@mui/icons-material/Assignment';
import ListAltIcon from '@mui/icons-material/ListAlt';
import PersonIcon from '@mui/icons-material/Person';
import RateReviewIcon from '@mui/icons-material/RateReview';
import PaymentIcon from '@mui/icons-material/Payment';
import LogoutIcon from '@mui/icons-material/Logout';
import JobsList from './UserPanelJobsList';
import MyProposals from './UserPanelMyProposals';
import ProfileSettings from './UserPanelProfileSettings';
import MyJobs from './UserPanelMyJobs';
import ReviewsList from './UserPanelReviewsList';
import PaymentsList from './UserPanelPaymentsList';

const drawerWidth = 220;

const navItems = [
  { label: 'Jobs', icon: <WorkIcon /> },
  { label: 'My Proposals', icon: <AssignmentIcon /> },
  { label: 'My Jobs', icon: <ListAltIcon /> },
  { label: 'Profile', icon: <PersonIcon /> },
  { label: 'Reviews', icon: <RateReviewIcon /> },
  { label: 'Payments', icon: <PaymentIcon /> },
];
 
В.3 Резервне копіювання користувацьких даних

     GitHub репозиторій: https://github.com/NureZakharovAnton/apz-pzpi-22-2-zakharov-anton/blob/main/Lab3/backend/src/modules/backups/backups.service.ts


export default function UserPanel() {
  const [selected, setSelected] = useState(0);
  const navigate = useNavigate();

  const handleSignOut = () => {
    localStorage.removeItem('accessToken');
    navigate('/login');
  };

  return (
    <Box sx={{ display: 'flex' }}>
      <CssBaseline />
      <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            User Panel
          </Typography>
          <Button color="inherit" startIcon={<LogoutIcon />} onClick={handleSignOut}>
            Sign Out
          </Button>
        </Toolbar>
      </AppBar>
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },
        }}
      >
        <Toolbar />
        <Box sx={{ overflow: 'auto' }}>
          <List>
            {navItems.map((item, idx) => (
              <ListItem key={item.label} disablePadding>
                <ListItemButton selected={selected === idx} onClick={() => setSelected(idx)}>
                  <ListItemIcon>{item.icon}</ListItemIcon>
                  <ListItemText primary={item.label} />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </Box>
      </Drawer>
      <Box component="main" sx={{ flexGrow: 1, bgcolor: 'background.default', p: 3, minHeight: '100vh' }}>
        <Toolbar />
        {selected === 0 && <JobsList />}
        {selected === 1 && <MyProposals />}
        {selected === 2 && <MyJobs />}
        {selected === 3 && <ProfileSettings />}
        {selected === 4 && <ReviewsList />}
        {selected === 5 && <PaymentsList />}
      </Box>
    </Box>
  );
}

// ========== src/components/Login.tsx ==========
import { useState } from 'react';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import { Box, Paper, Typography, TextField, Button, Alert, Link } from '@mui/material';

function parseJwt(token: string) {
  try {
    return JSON.parse(atob(token.split('.')[1]));
  } catch {
    return null;
  }
}

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      const res = await fetch('/api/v1/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      if (!res.ok) throw new Error('Invalid credentials');
      const data = await res.json();
      localStorage.setItem('accessToken', data.accessToken);
      const payload = parseJwt(data.accessToken);
      if (payload && payload.role === 'admin') {
        navigate('/admin');
      } else {
        navigate('/user');
      }
    } catch (err: any) {
      setError(err.message || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box sx={{ minHeight: '100vh', width: '100vw', display: 'flex', alignItems: 'center', justifyContent: 'center', bgcolor: 'background.default' }}>
      <Paper elevation={3} sx={{ p: 4, width: '100%', maxWidth: 400, borderRadius: 3, boxSizing: 'border-box' }}>
        <Typography variant="h5" align="center" gutterBottom fontWeight={600} color="primary.main">
          Login
        </Typography>
        <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
          <TextField
            label="Email"
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
            fullWidth
            margin="normal"
            autoFocus
          />
          <TextField
            label="Password"
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
            fullWidth
            margin="normal"
          />
          {error && <Alert severity="error" sx={{ my: 2 }}>{error}</Alert>}
          <Button
            type="submit"
            variant="contained"
            color="primary"
            fullWidth
            size="large"
            sx={{ mt: 2, borderRadius: 2 }}
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </Button>
          <Box sx={{ mt: 2, textAlign: 'center' }}>
            <Link component={RouterLink} to="/register" underline="hover">
              Don&apos;t have an account? Register
            </Link>
          </Box>
        </Box>
      </Paper>
    </Box>
  );
} 
